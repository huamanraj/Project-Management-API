{
  "info": {
    "name": "Project Management API",
    "description": "Complete API collection for the Project Management Platform",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api",
      "type": "string"
    },
    {
      "key": "frontendUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "projectId",
      "value": "",
      "type": "string"
    },
    {
      "key": "orderId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.data.tokens.accessToken);",
                  "    pm.collectionVariables.set('refreshToken', response.data.tokens.refreshToken);",
                  "    pm.collectionVariables.set('userId', response.data.user._id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"AdminPassword123!\",\n  \"firstName\": \"Admin\",\n  \"lastName\": \"User\",\n  \"role\": \"admin\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/signup",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "signup"]
            }
          }
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.data.tokens.accessToken);",
                  "    pm.collectionVariables.set('refreshToken', response.data.tokens.refreshToken);",
                  "    pm.collectionVariables.set('userId', response.data.user._id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"AdminPassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.data.tokens.accessToken);",
                  "    pm.collectionVariables.set('refreshToken', response.data.tokens.refreshToken);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "refresh"]
            }
          }
        },
        {
          "name": "Get Profile",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "profile"]
            }
          }
        },
        {
          "name": "Update Profile",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Updated Admin\",\n  \"lastName\": \"Updated User\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "profile"]
            }
          }
        },
        {
          "name": "Change Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentPassword\": \"AdminPassword123!\",\n  \"newPassword\": \"NewAdminPassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/change-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "change-password"]
            }
          }
        },
        {
          "name": "Logout",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            }
          }
        },
        {
          "name": "Logout All Devices",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/logout-all",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout-all"]
            }
          }
        }
      ]
    },
    {
      "name": "Projects",
      "item": [
        {
          "name": "Create Project",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('projectId', response.data.project._id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Sample Project\",\n  \"description\": \"A sample project for testing the API\",\n  \"priority\": \"high\",\n  \"tags\": [\"api\", \"testing\", \"sample\"],\n  \"budget\": {\n    \"amount\": 50000,\n    \"currency\": \"USD\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/projects",
              "host": ["{{baseUrl}}"],
              "path": ["projects"]
            }
          }
        },
        {
          "name": "Get All Projects",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/projects?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["projects"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "name": "Get Project by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/projects/{{projectId}}",
              "host": ["{{baseUrl}}"],
              "path": ["projects", "{{projectId}}"]
            }
          }
        },
        {
          "name": "Update Project",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Project Name\",\n  \"description\": \"Updated project description\",\n  \"status\": \"completed\",\n  \"priority\": \"medium\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/projects/{{projectId}}",
              "host": ["{{baseUrl}}"],
              "path": ["projects", "{{projectId}}"]
            }
          }
        },
        {
          "name": "Get Project Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/projects/stats",
              "host": ["{{baseUrl}}"],
              "path": ["projects", "stats"]
            }
          }
        },
        {
          "name": "Filter Projects by Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/projects?status=active&priority=high",
              "host": ["{{baseUrl}}"],
              "path": ["projects"],
              "query": [
                {
                  "key": "status",
                  "value": "active"
                },
                {
                  "key": "priority",
                  "value": "high"
                }
              ]
            }
          }
        },
        {
          "name": "Search Projects",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/projects?search=sample&sort=name&order=asc",
              "host": ["{{baseUrl}}"],
              "path": ["projects"],
              "query": [
                {
                  "key": "search",
                  "value": "sample"
                },
                {
                  "key": "sort",
                  "value": "name"
                },
                {
                  "key": "order",
                  "value": "asc"
                }
              ]
            }
          }
        },
        {
          "name": "Delete Project",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/projects/{{projectId}}",
              "host": ["{{baseUrl}}"],
              "path": ["projects", "{{projectId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Team Management",
      "item": [
        {
          "name": "Add Member to Project",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{userId}}\",\n  \"role\": \"member\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/projects/{{projectId}}/members",
              "host": ["{{baseUrl}}"],
              "path": ["projects", "{{projectId}}", "members"]
            }
          }
        },
        {
          "name": "Get Project Members",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/projects/{{projectId}}/members",
              "host": ["{{baseUrl}}"],
              "path": ["projects", "{{projectId}}", "members"]
            }
          }
        },
        {
          "name": "Update Member Role",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"role\": \"admin\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/projects/{{projectId}}/members/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["projects", "{{projectId}}", "members", "{{userId}}"]
            }
          }
        },
        {
          "name": "Remove Member from Project",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/projects/{{projectId}}/members/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["projects", "{{projectId}}", "members", "{{userId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Billing",
      "item": [
        {
          "name": "Get Available Plans",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/billing/plans",
              "host": ["{{baseUrl}}"],
              "path": ["billing", "plans"]
            }
          }
        },
        {
          "name": "Get Billing Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/billing/status",
              "host": ["{{baseUrl}}"],
              "path": ["billing", "status"]
            }
          }
        },
        {
          "name": "Create Upgrade Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('orderId', response.data.order.orderId);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"planType\": \"premium_monthly\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/billing/upgrade",
              "host": ["{{baseUrl}}"],
              "path": ["billing", "upgrade"]
            }
          }
        },
        {
          "name": "Verify Payment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"razorpay_order_id\": \"{{orderId}}\",\n  \"razorpay_payment_id\": \"pay_sample123\",\n  \"razorpay_signature\": \"sample_signature\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/billing/verify",
              "host": ["{{baseUrl}}"],
              "path": ["billing", "verify"]
            }
          }
        },
        {
          "name": "Handle Payment Failure",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": \"{{orderId}}\",\n  \"reason\": \"Insufficient funds in account\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/billing/failure",
              "host": ["{{baseUrl}}"],
              "path": ["billing", "failure"]
            }
          }
        },
        {
          "name": "Get Payment History",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/billing/history?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["billing", "history"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "name": "Cancel Payment",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/billing/cancel/{{orderId}}",
              "host": ["{{baseUrl}}"],
              "path": ["billing", "cancel", "{{orderId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Admin - Billing",
      "item": [
        {
          "name": "Get Payment Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/billing/admin/stats",
              "host": ["{{baseUrl}}"],
              "path": ["billing", "admin", "stats"]
            }
          }
        },
        {
          "name": "Get All Payments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/billing/admin/payments?page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["billing", "admin", "payments"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            }
          }
        },
        {
          "name": "Filter Payments by User",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/billing/admin/payments?userId={{userId}}&status=completed",
              "host": ["{{baseUrl}}"],
              "path": ["billing", "admin", "payments"],
              "query": [
                {
                  "key": "userId",
                  "value": "{{userId}}"
                },
                {
                  "key": "status",
                  "value": "completed"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Health Check",
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/../health",
          "host": ["{{baseUrl}}"],
          "path": ["..", "health"]
        }
      }
    },
    {
      "name": "API Documentation",
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/",
          "host": ["{{baseUrl}}"],
          "path": [""]
        }
      }
    },
    {
      "name": "Frontend Integration Tests",
      "item": [
        {
          "name": "CORS Preflight Check",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "OPTIONS",
            "header": [
              {
                "key": "Origin",
                "value": "{{frontendUrl}}"
              },
              {
                "key": "Access-Control-Request-Method",
                "value": "POST"
              },
              {
                "key": "Access-Control-Request-Headers",
                "value": "Content-Type, Authorization"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Frontend Login Flow",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test for frontend integration",
                  "pm.test('Response has CORS headers', function () {",
                  "    pm.expect(pm.response.headers.get('Access-Control-Allow-Origin')).to.exist;",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Response structure matches frontend expectations', function () {",
                  "        pm.expect(response).to.have.property('success', true);",
                  "        pm.expect(response.data).to.have.property('user');",
                  "        pm.expect(response.data).to.have.property('tokens');",
                  "        pm.expect(response.data.tokens).to.have.property('accessToken');",
                  "        pm.expect(response.data.tokens).to.have.property('refreshToken');",
                  "    });",
                  "    ",
                  "    // Store tokens for frontend simulation",
                  "    pm.collectionVariables.set('accessToken', response.data.tokens.accessToken);",
                  "    pm.collectionVariables.set('refreshToken', response.data.tokens.refreshToken);",
                  "    pm.collectionVariables.set('userId', response.data.user._id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Origin",
                "value": "{{frontendUrl}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"AdminPassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Frontend Token Refresh Simulation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Token refresh works for frontend', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data.tokens).to.have.property('accessToken');",
                  "    pm.expect(response.data.tokens).to.have.property('refreshToken');",
                  "    ",
                  "    // Update tokens",
                  "    pm.collectionVariables.set('accessToken', response.data.tokens.accessToken);",
                  "    pm.collectionVariables.set('refreshToken', response.data.tokens.refreshToken);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Origin",
                "value": "{{frontendUrl}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "refresh"]
            }
          }
        },
        {
          "name": "Frontend Project Creation Flow",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Project creation returns frontend-compatible data', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const response = pm.response.json();",
                  "    ",
                  "    pm.expect(response.data.project).to.have.property('_id');",
                  "    pm.expect(response.data.project).to.have.property('name');",
                  "    pm.expect(response.data.project).to.have.property('members');",
                  "    pm.expect(response.data.project.members).to.be.an('array');",
                  "    ",
                  "    // Store for frontend use",
                  "    pm.collectionVariables.set('projectId', response.data.project._id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Origin",
                "value": "{{frontendUrl}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Frontend Test Project\",\n  \"description\": \"Project created from frontend simulation\",\n  \"priority\": \"high\",\n  \"tags\": [\"frontend\", \"test\", \"react\"],\n  \"budget\": {\n    \"amount\": 25000,\n    \"currency\": \"USD\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/projects",
              "host": ["{{baseUrl}}"],
              "path": ["projects"]
            }
          }
        },
        {
          "name": "Frontend Pagination Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Pagination data structure for frontend', function () {",
                  "    const response = pm.response.json();",
                  "    ",
                  "    pm.expect(response.data).to.have.property('projects');",
                  "    pm.expect(response.data).to.have.property('pagination');",
                  "    ",
                  "    const pagination = response.data.pagination;",
                  "    pm.expect(pagination).to.have.property('currentPage');",
                  "    pm.expect(pagination).to.have.property('totalPages');",
                  "    pm.expect(pagination).to.have.property('totalItems');",
                  "    pm.expect(pagination).to.have.property('hasNextPage');",
                  "    pm.expect(pagination).to.have.property('hasPrevPage');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Origin",
                "value": "{{frontendUrl}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/projects?page=1&limit=5&sort=createdAt&order=desc",
              "host": ["{{baseUrl}}"],
              "path": ["projects"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "5"
                },
                {
                  "key": "sort",
                  "value": "createdAt"
                },
                {
                  "key": "order",
                  "value": "desc"
                }
              ]
            }
          }
        },
        {
          "name": "Frontend Error Handling Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Error response structure for frontend', function () {",
                  "    pm.response.to.have.status(401);",
                  "    const response = pm.response.json();",
                  "    ",
                  "    pm.expect(response).to.have.property('success', false);",
                  "    pm.expect(response).to.have.property('error');",
                  "    pm.expect(response.error).to.have.property('code');",
                  "    pm.expect(response.error).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [
              {
                "key": "Origin",
                "value": "{{frontendUrl}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "profile"]
            }
          }
        }
      ]
    }
  ]
}